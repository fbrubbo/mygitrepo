apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven'

sourceCompatibility = 1.8
version = '1.0'
war.baseName = 'flychecker'

repositories {
    mavenCentral()
}

// Fills out all dependencies which are necessary to start the embedded jetty into our war file
configurations {
	embeddedJetty
}

dependencies {
	embeddedJetty 'org.eclipse.jetty:jetty-servlet:+',
	 		'org.eclipse.jetty:jetty-webapp:+',
	 		'org.eclipse.jetty:jetty-jsp:+',
	 		'org.eclipse.jetty:jetty-annotations:+',
	 		'args4j:args4j:+'
	 		

    compile 'org.seleniumhq.selenium:selenium-java:+',
			'org.quartz-scheduler:quartz:+',
			'log4j:log4j:+',
			'org.apache.httpcomponents:httpclient:+',
			'net.sourceforge.htmlcleaner:htmlcleaner:+',
			fileTree(dir: 'lib', include: '*.jar')
			
	providedCompile 'javax:javaee-api:+'
			
    testCompile 'junit:junit:4.+'
}


war {
	// unzip and add all jetty dependencies into the root of our war file
 	from {
 		configurations.embeddedJetty.collect {
   			project.zipTree(it)
  		}
 	}
 	// remove signature and unnecessary files
 	exclude "META-INF/*.SF", "META-INF/*.RSA", "about.html", "about_files/**", "readme.txt", "plugin.properties", "jetty-dir.css"


 	// include in the root of the war only the classes which will be used to start the embedded Jetty
 	from "$buildDir/classes/main"
 	exclude "br/datamaio/"
 	
  	// sets the main class to run when the generate war be executed using 'java -jar'
 	manifest { attributes 'Main-Class': 'com.embedded.JettyServer' }
}

task copyResources {    
    doLast {   
        copy {            
            from 'ids.data', 'chromedriver'
            into 'build/libs'
        }
    }    
}
war.dependsOn copyResources


// Once you will need some basic api (servlet api, for example) for compilation, you need to add embeddedJetty dependencies for compilation
sourceSets.main.compileClasspath += configurations.embeddedJetty

// you need to do the same for eclipse classpath, so you can use it to edit your java files
eclipse {
	classpath {
  		plusConfigurations += [configurations.embeddedJetty]
 	}
}

wrapper {
  	gradleVersion = '2.5'
}